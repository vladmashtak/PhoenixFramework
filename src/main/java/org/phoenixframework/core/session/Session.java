package org.phoenixframework.core.session;

import org.phoenixframework.core.executor.CachedResultSet;

/**
 * The main interface provides the interaction between Java application and Phoenix framework.
 *
 * try (Session session = SessionFactory.openSession()) {
 *     session.executeQuery();
 * }
 *
 * try (Session session = SessionFactory.openSession()) {
 *     session.executeQuery();
 * } catch (Exception e) {
 *
 * }
 *
 * try (Session session = SessionFactory.openSession()) {
 *     Transaction tx = session.beginTransaction();
 *     try {
 *         session.executeQuery();
 *         session.executeUpdate();
 *
 *         tx.commit();
 *     } catch (Exception e) {
 *         tx.rollback();
 *     }
 * }
 *
 * @author Oleg Marchenko
 */

public interface Session extends AutoCloseable {

    /**
     * Begin a unit of work and return the associated {@link Transaction} object.
     *
     * @return the associated {@link Transaction} object
     */
    Transaction beginTransaction();

    /**
     * Executes the SQL query and returns the <code>CachedResultSet</code> object generated by the query.
     *
     * @param query SQL query to execute
     * @param params collection of query parameters
     * @return a <code>CachedResultSet</code> object that contains the data produced by the
     *         query; never <code>null</code>
     * @throws IllegalStateException if the query cannot be execute
     */
    CachedResultSet executeQuery(String query, Object... params);

    /**
     * Executes the SQL query, which must be an SQL Data Manipulation Language (DML) statement,
     * such as <code>INSERT</code>, <code>UPDATE</code> or <code>DELETE</code>;
     * or an SQL statement that returns nothing, such as a DDL statement.
     *
     * @param query SQL query to execute
     * @param params query parameters
     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
     *         or (2) 0 for SQL statements that return nothing
     * @throws IllegalStateException if the query cannot be execute
     */
    int executeUpdate(String query, Object... params);

    /**
     * Returns <tt>true</tt> if the session is still open.
     *
     * @return <tt>true</tt> if the session is still open
     */
    boolean isOpen();

    /**
     * End the session by releasing the JDBC connection and cleaning up.
     */
    @Override
    void close();
}
